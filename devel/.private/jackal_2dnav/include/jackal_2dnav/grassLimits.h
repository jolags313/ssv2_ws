// Generated by gencpp from file jackal_2dnav/grassLimits.msg
// DO NOT EDIT!


#ifndef JACKAL_2DNAV_MESSAGE_GRASSLIMITS_H
#define JACKAL_2DNAV_MESSAGE_GRASSLIMITS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jackal_2dnav
{
template <class ContainerAllocator>
struct grassLimits_
{
  typedef grassLimits_<ContainerAllocator> Type;

  grassLimits_()
    : minX(0.0)
    , maxX(0.0)
    , minY(0.0)
    , maxY(0.0)  {
    }
  grassLimits_(const ContainerAllocator& _alloc)
    : minX(0.0)
    , maxX(0.0)
    , minY(0.0)
    , maxY(0.0)  {
  (void)_alloc;
    }



   typedef double _minX_type;
  _minX_type minX;

   typedef double _maxX_type;
  _maxX_type maxX;

   typedef double _minY_type;
  _minY_type minY;

   typedef double _maxY_type;
  _maxY_type maxY;





  typedef boost::shared_ptr< ::jackal_2dnav::grassLimits_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jackal_2dnav::grassLimits_<ContainerAllocator> const> ConstPtr;

}; // struct grassLimits_

typedef ::jackal_2dnav::grassLimits_<std::allocator<void> > grassLimits;

typedef boost::shared_ptr< ::jackal_2dnav::grassLimits > grassLimitsPtr;
typedef boost::shared_ptr< ::jackal_2dnav::grassLimits const> grassLimitsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jackal_2dnav::grassLimits_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jackal_2dnav::grassLimits_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jackal_2dnav::grassLimits_<ContainerAllocator1> & lhs, const ::jackal_2dnav::grassLimits_<ContainerAllocator2> & rhs)
{
  return lhs.minX == rhs.minX &&
    lhs.maxX == rhs.maxX &&
    lhs.minY == rhs.minY &&
    lhs.maxY == rhs.maxY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jackal_2dnav::grassLimits_<ContainerAllocator1> & lhs, const ::jackal_2dnav::grassLimits_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jackal_2dnav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jackal_2dnav::grassLimits_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jackal_2dnav::grassLimits_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jackal_2dnav::grassLimits_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "655810147826f0048b34a50ae9b43df0";
  }

  static const char* value(const ::jackal_2dnav::grassLimits_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x655810147826f004ULL;
  static const uint64_t static_value2 = 0x8b34a50ae9b43df0ULL;
};

template<class ContainerAllocator>
struct DataType< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jackal_2dnav/grassLimits";
  }

  static const char* value(const ::jackal_2dnav::grassLimits_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 minX\n"
"float64 maxX\n"
"\n"
"float64 minY\n"
"float64 maxY\n"
;
  }

  static const char* value(const ::jackal_2dnav::grassLimits_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.minX);
      stream.next(m.maxX);
      stream.next(m.minY);
      stream.next(m.maxY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct grassLimits_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jackal_2dnav::grassLimits_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jackal_2dnav::grassLimits_<ContainerAllocator>& v)
  {
    s << indent << "minX: ";
    Printer<double>::stream(s, indent + "  ", v.minX);
    s << indent << "maxX: ";
    Printer<double>::stream(s, indent + "  ", v.maxX);
    s << indent << "minY: ";
    Printer<double>::stream(s, indent + "  ", v.minY);
    s << indent << "maxY: ";
    Printer<double>::stream(s, indent + "  ", v.maxY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JACKAL_2DNAV_MESSAGE_GRASSLIMITS_H
