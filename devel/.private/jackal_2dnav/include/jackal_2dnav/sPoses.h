// Generated by gencpp from file jackal_2dnav/sPoses.msg
// DO NOT EDIT!


#ifndef JACKAL_2DNAV_MESSAGE_SPOSES_H
#define JACKAL_2DNAV_MESSAGE_SPOSES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jackal_2dnav/sInstance.h>

namespace jackal_2dnav
{
template <class ContainerAllocator>
struct sPoses_
{
  typedef sPoses_<ContainerAllocator> Type;

  sPoses_()
    : sPoses()  {
    }
  sPoses_(const ContainerAllocator& _alloc)
    : sPoses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::jackal_2dnav::sInstance_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::jackal_2dnav::sInstance_<ContainerAllocator> >> _sPoses_type;
  _sPoses_type sPoses;





  typedef boost::shared_ptr< ::jackal_2dnav::sPoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jackal_2dnav::sPoses_<ContainerAllocator> const> ConstPtr;

}; // struct sPoses_

typedef ::jackal_2dnav::sPoses_<std::allocator<void> > sPoses;

typedef boost::shared_ptr< ::jackal_2dnav::sPoses > sPosesPtr;
typedef boost::shared_ptr< ::jackal_2dnav::sPoses const> sPosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jackal_2dnav::sPoses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jackal_2dnav::sPoses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jackal_2dnav::sPoses_<ContainerAllocator1> & lhs, const ::jackal_2dnav::sPoses_<ContainerAllocator2> & rhs)
{
  return lhs.sPoses == rhs.sPoses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jackal_2dnav::sPoses_<ContainerAllocator1> & lhs, const ::jackal_2dnav::sPoses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jackal_2dnav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jackal_2dnav::sPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jackal_2dnav::sPoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jackal_2dnav::sPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jackal_2dnav::sPoses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jackal_2dnav::sPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jackal_2dnav::sPoses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jackal_2dnav::sPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89f29c293b2e6dbeec18915c4b5a83f6";
  }

  static const char* value(const ::jackal_2dnav::sPoses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89f29c293b2e6dbeULL;
  static const uint64_t static_value2 = 0xec18915c4b5a83f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::jackal_2dnav::sPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jackal_2dnav/sPoses";
  }

  static const char* value(const ::jackal_2dnav::sPoses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jackal_2dnav::sPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jackal_2dnav/sInstance[] sPoses\n"
"\n"
"================================================================================\n"
"MSG: jackal_2dnav/sInstance\n"
"geometry_msgs/Pose objPose\n"
"string objLabel\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::jackal_2dnav::sPoses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jackal_2dnav::sPoses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sPoses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sPoses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jackal_2dnav::sPoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jackal_2dnav::sPoses_<ContainerAllocator>& v)
  {
    s << indent << "sPoses[]" << std::endl;
    for (size_t i = 0; i < v.sPoses.size(); ++i)
    {
      s << indent << "  sPoses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::jackal_2dnav::sInstance_<ContainerAllocator> >::stream(s, indent + "    ", v.sPoses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JACKAL_2DNAV_MESSAGE_SPOSES_H
